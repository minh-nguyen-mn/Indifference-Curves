#pragma kernel March


#include "./Includes/MarchingTable.hlsl"

#include "./Includes/MetricsCompute.compute"


RWStructuredBuffer<float> _Weights;
// RWStructuredBuffer<float3x4> _Vectors;

float _IsoLevel;
float3 _PlaneForward;
float3 _PlaneRight;

struct Segment{
    float3 a, b;
};

AppendStructuredBuffer<Segment> _Segments;


float3 interp(float3 sideVertex1, float valueAtPoint1, float3 sideVertex2, float valueAtPoint2)
{
    return (sideVertex1 + (_IsoLevel - valueAtPoint1) * (sideVertex2 - sideVertex1) / (valueAtPoint2 - valueAtPoint1));
}

// float3 CrossProd(float3 vec1, float3 vec2){
//     float3 cross;
//     cross.x = vec1.y * vec2.z - vec1.z * vec2.y;
//     cross.y = vec1.z * vec2.x - vec1.x * vec2.z;
//     cross.z = vec1.x * vec2.y - vec1.y * vec2.x;
//     return cross;
// }

// float Magnitude(float3 vec){
//     return sqrt(vec.x * vec.x + vec.y * vec.y + vec.z * vec.z);
// }

// float3 Normalized(float3 vec){
//     return vec / Magnitude(vec);
// }

// float DotProd(float3 vec1, float3 vec2){
//     return vec1.x * vec2.x + vec1.y * vec2.y + vec1.z * vec2.z;
// }

// float3 MidPoint(float3 vec1, float3 vec2){
//     return float3((vec1.x + vec2.x)/2, (vec1.y + vec2.y)/2, (vec1.z + vec1.y)/2);
// }


[numthreads(numThreads, numThreads, 1)]
void March(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _ChunkSize - 1 || id.y >= _ChunkSize - 1)
    {
        return;
    }

    float squareValues[4] = {
       _Weights[indexFromCoord(id.x, id.y, 0)],
       _Weights[indexFromCoord(id.x, id.y + 1, 0)],
       _Weights[indexFromCoord(id.x + 1, id.y + 1, 0)],
       _Weights[indexFromCoord(id.x + 1, id.y, 0)]
    };

    int squareIndex = 0; // Find the index in look up table for correct square situation (0 - 15)
    if (squareValues[0] < _IsoLevel) squareIndex |= 1;
    if (squareValues[1] < _IsoLevel) squareIndex |= 2;
    if (squareValues[2] < _IsoLevel) squareIndex |= 4;
    if (squareValues[3] < _IsoLevel) squareIndex |= 8;

    int sides[] = pTable[squareIndex];

    for (int i = 0; sides[i] != -1; i += 2)
    {
        // First vertex lies between vertex s00 and vertex s01
        int s00 = sideConnections[sides[i]][0];
        int s01 = sideConnections[sides[i]][1];

        // Second vertex lies between vertex s10 and vertex s11
        int s10 = sideConnections[sides[i + 1]][0];
        int s11 = sideConnections[sides[i + 1]][1];

        float3 interpA = interp(squareCornerOffsets[s00], squareValues[s00], squareCornerOffsets[s01], squareValues[s01]);
        float3 interpB = interp(squareCornerOffsets[s10], squareValues[s10], squareCornerOffsets[s11], squareValues[s11]);

        Segment seg;
        seg.a = (interpA.x + id.x - _ChunkSize / 2.0f) * float3(1, 0, 0) + (interpA.z + id.y - _ChunkSize / 2.0f) * float3(0, 0, 1);
        seg.b = (interpB.x + id.x - _ChunkSize / 2.0f) * float3(1, 0, 0) + (interpB.z + id.y - _ChunkSize / 2.0f) * float3(0, 0, 1);
        _Segments.Append(seg);

        // float3 n = CrossProd(_PlaneRight, _PlaneForward); // Calculate the normal out of the plane for rotating segments

        // float3 dir = seg.b - seg.a; // Find direction each segment points in
        // float3 pos = MidPoint(seg.a, seg.b);
        // float mag = Magnitude(dir);

        // // Precalculate some values used in the transformation
        // float CosTH = DotProd(dir, float3(0, 0, 1)) / mag;
        // float SinTH = Magnitude(CrossProd(float3(0,0,1), dir)) / mag;
        // float OneMCos = 1 - CosTH;

        // // Define the rotational transformation matrix to describe transformations on segment mesh
        // _Vectors[indexFromCoord(id.x, id.y, 0)]._m00 = (CosTH + n.x * n.x * OneMCos);
        // _Vectors[indexFromCoord(id.x, id.y, 0)]._m01 = (n.x * n.y * OneMCos - n.z * SinTH);
        // _Vectors[indexFromCoord(id.x, id.y, 0)]._m02 = mag * (n.x * n.z * OneMCos + n.y * SinTH);

        // _Vectors[indexFromCoord(id.x, id.y, 0)]._m10 = (n.y * n.x * OneMCos + n.z * SinTH);
        // _Vectors[indexFromCoord(id.x, id.y, 0)]._m11 = (CosTH + n.y * n.y * OneMCos);
        // _Vectors[indexFromCoord(id.x, id.y, 0)]._m12 = mag * (n.y * n.z * OneMCos - n.x * SinTH);

        // _Vectors[indexFromCoord(id.x, id.y, 0)]._m20 = (n.z * n.x * OneMCos - n.y * SinTH);
        // _Vectors[indexFromCoord(id.x, id.y, 0)]._m21 = (n.z * n.y * OneMCos + n.x * SinTH);
        // _Vectors[indexFromCoord(id.x, id.y, 0)]._m22 = mag * (CosTH + n.z * n.z * OneMCos);

        // _Vectors[indexFromCoord(id.x, id.y, 0)]._m03 = pos.x;
        // _Vectors[indexFromCoord(id.x, id.y, 0)]._m13 = pos.y;
        // _Vectors[indexFromCoord(id.x, id.y, 0)]._m23 = pos.z;
    }

}